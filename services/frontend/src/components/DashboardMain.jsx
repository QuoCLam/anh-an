import React, { useState, useEffect } from "react";
import OrderForm from "./OrderForm";
import OrderDetail from "./OrderDetail";

const stepsFlow = [
  "Ch·ªù x√°c nh·∫≠n thi·∫øt k·∫ø",
  "Ch·ªù x√°c nh·∫≠n ƒëƒÉng k√Ω c√¥ng b·ªë",
  "Ch·ªù x√°c nh·∫≠n th√≠ nghi·ªám",
  "Ch·ªù thu mua",
  "Ch·ªù nh·∫≠p kho nguy√™n v·∫≠t li·ªáu & bao b√¨",
  "Ch·ªù s·∫£n xu·∫•t",
  "Ch·ªù ƒë√≥ng g√≥i",
  "Ch·ªù nh·∫≠p kho th√†nh ph·∫©m",
  "Ch·ªù giao h√†ng",
  "Ch·ªù thu ti·ªÅn",
  "Ho√†n t·∫•t",
];

const departmentButtons = [
  { label: "Thi·∫øt k·∫ø", icon: "üé®", color: "bg-pink-100" },
  { label: "ƒêƒÉng k√Ω c√¥ng b·ªë", icon: "üìù", color: "bg-orange-100" },
  { label: "Th√≠ nghi·ªám", icon: "üß™", color: "bg-indigo-100" },
  { label: "Thu mua", icon: "üõí", color: "bg-green-100" },
  { label: "Kho nguy√™n v·∫≠t li·ªáu & bao b√¨", icon: "üè¨", color: "bg-lime-100" },
  { label: "S·∫£n xu·∫•t", icon: "üè≠", color: "bg-yellow-100" },
  { label: "ƒê√≥ng g√≥i", icon: "üì¶", color: "bg-blue-100" },
  { label: "Kho th√†nh ph·∫©m", icon: "üè™", color: "bg-gray-100" },
  { label: "Giao h√†ng", icon: "üöö", color: "bg-purple-100" },
  { label: "Thu ti·ªÅn", icon: "üí∞", color: "bg-red-100" },
];

const notifications = [
  { msg: "ƒê∆°n SO1002 b·ªã ch·∫≠m x√°c nh·∫≠n thu mua", type: "error" },
  { msg: "ƒê∆°n SO1003 ƒë√£ thu ti·ªÅn xong", type: "success" },
];

export default function DashboardMain() {
  const [orders, setOrders] = useState([]);
  const [selected, setSelected] = useState(null);
  const [showOrderModal, setShowOrderModal] = useState(false);

  // Load orders t·ª´ backend m·ªói khi m·ªü trang ho·∫∑c x√≥a/th√™m ƒë∆°n m·ªõi
  const fetchOrders = async () => {
    try {
      const res = await fetch(`${import.meta.env.VITE_API_URL}/orders/`);
      const data = await res.json();
      console.log("Fetched orders:", data);
      setOrders(data);
      // KH√îNG alert n·∫øu m·∫£ng r·ªóng!
    } catch (e) {
      alert("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng!");
    }
  };

  useEffect(() => {
    fetchOrders();
  }, []);

  // Th√™m ƒë∆°n h√†ng m·ªõi
  const addOrder = async (data) => {
    try {
      await fetch(`${import.meta.env.VITE_API_URL}/orders/`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data),
      });
      fetchOrders();
    } catch (e) {
      alert("L·ªói khi th√™m ƒë∆°n h√†ng!");
    }
  };

  // Khi x√°c nh·∫≠n ti·∫øn tr√¨nh
  const advanceStep = (id) => {
    setOrders(
      orders.map((o) =>
        o.id === id
          ? {
              ...o,
              step: o.step + 1,
              status:
                o.step + 1 >= stepsFlow.length
                  ? stepsFlow[stepsFlow.length - 1]
                  : stepsFlow[o.step + 1],
            }
          : o
      )
    );
    setSelected(null);
  };

  // H√†m xo√° ƒë∆°n h√†ng
  const handleDeleteOrder = async (orderId) => {
    if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng n√†y?")) return;
    try {
      await fetch(`${import.meta.env.VITE_API_URL}/orders/${orderId}`, {
        method: "DELETE",
      });
      fetchOrders();
    } catch (e) {
      alert("L·ªói khi x√≥a ƒë∆°n h√†ng!");
    }
  };

  // Th·ªëng k√™ s·ªë l∆∞·ª£ng c√°c tr·∫°ng th√°i
  const numProcessing = orders.filter((o) => o.status !== "Ho√†n t·∫•t").length;
  const numLate = orders.filter((o) => {
    const today = new Date();
    return (
      o.delivery_date &&
      new Date(o.delivery_date) < today &&
      o.status !== "Ho√†n t·∫•t"
    );
  }).length;
  const numDone = orders.filter((o) => o.status === "Ho√†n t·∫•t").length;
  const numDelivering = orders.filter((o) => o.status === stepsFlow[8]).length;

  // Vi·ªác c√° nh√¢n: ƒë∆°n ch∆∞a ho√†n t·∫•t, ƒëang ·ªü b∆∞·ªõc
  const myTasks = orders
    .filter((o) => o.status !== "Ho√†n t·∫•t" && o.step < stepsFlow.length - 1)
    .map((o) => ({
      order: o,
      stepName: stepsFlow[o.step],
      stepIdx: o.step,
    }));

  // L·∫•y s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong order (n·∫øu c√≥)
  const getFirstItem = (order) =>
    order.items && order.items.length > 0 ? order.items[0] : {};

  return (
    <div className="p-8 bg-gray-100 min-h-screen">
      {/* Header v√† n√∫t t·∫°o ƒë∆°n m·ªõi */}
      <div className="flex justify-between items-center mb-4">
        <div className="text-3xl font-bold">Dashboard Anh An</div>
        <button
          className="px-4 py-2 rounded-xl font-bold shadow bg-blue-500 text-white hover:scale-105 duration-200"
          onClick={() => setShowOrderModal(true)}
        >
          + T·∫°o ƒë∆°n h√†ng m·ªõi
        </button>
      </div>
      {/* Stats */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
        <StatCard title="ƒê∆°n ƒëang x·ª≠ l√Ω" value={numProcessing} icon="üïì" />
        <StatCard title="ƒê∆°n tr·ªÖ" value={numLate} icon="‚è∞" />
        <StatCard title="ƒê∆°n ho√†n t·∫•t" value={numDone} icon="‚úÖ" />
        <StatCard title="ƒê∆°n ch·ªù giao" value={numDelivering} icon="üöö" />
      </div>
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Tasks */}
        <div>
          <div className="text-xl font-semibold mb-2">Vi·ªác c·ªßa t√¥i h√¥m nay</div>
          <div className="bg-white rounded-2xl shadow p-4">
            <table className="w-full">
              <thead>
                <tr className="text-left text-gray-500">
                  <th className="p-2">ƒê∆°n h√†ng</th>
                  <th className="p-2">B∆∞·ªõc c√¥ng vi·ªác</th>
                  <th className="p-2">T√°c v·ª•</th>
                </tr>
              </thead>
              <tbody>
                {myTasks.length === 0 && (
                  <tr>
                    <td colSpan={3} className="text-gray-400 p-4">
                      Kh√¥ng c√≥ vi·ªác c·∫ßn x√°c nh·∫≠n
                    </td>
                  </tr>
                )}
                {myTasks.map((task, i) => {
                  const dep = departmentButtons[task.stepIdx];
                  return (
                    <tr key={i} className="border-b">
                      <td className="p-2">SO{1000 + task.order.id}</td>
                      <td className="p-2 flex items-center gap-2">
                        <span
                          className={`px-2 py-1 rounded-full text-lg ${dep.color}`}
                        >
                          {dep.icon}
                        </span>
                        {task.stepName}
                      </td>
                      <td className="p-2">
                        <button
                          className="bg-green-500 px-3 py-1 rounded-xl text-white"
                          onClick={() => advanceStep(task.order.id)}
                        >
                          X√°c nh·∫≠n
                        </button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        </div>
        {/* Notifications */}
        <div>
          <div className="text-xl font-semibold mb-2">Th√¥ng b√°o h·ªá th·ªëng</div>
          <div className="bg-white rounded-2xl shadow p-4 space-y-2">
            {notifications.map((n, i) => (
              <div
                key={i}
                className={`p-2 rounded ${
                  n.type === "error"
                    ? "bg-red-100 text-red-600"
                    : "bg-green-100 text-green-600"
                }`}
              >
                {n.msg}
              </div>
            ))}
          </div>
        </div>
      </div>
      {/* Orders table */}
      <div className="mt-8">
        <div className="text-xl font-semibold mb-2">ƒê∆°n h√†ng n·ªïi b·∫≠t</div>
        <div className="bg-white rounded-2xl shadow p-4">
          <table className="w-full">
            <thead>
              <tr className="text-left text-gray-500">
                <th className="p-2">M√£ ƒë∆°n</th>
                <th className="p-2">Kh√°ch h√†ng</th>
                <th className="p-2">S·∫£n ph·∫©m</th>
                <th className="p-2">S·ªë l∆∞·ª£ng</th>
                <th className="p-2">ƒê∆°n v·ªã</th>
                <th className="p-2">Ng√†y nh·∫≠n</th>
                <th className="p-2">Ng√†y giao</th>
                <th className="p-2">Tr·∫°ng th√°i</th>
                <th className="p-2">B∆∞·ªõc</th>
                <th className="p-2">Chi ti·∫øt</th>
                <th className="p-2">X√≥a</th>
              </tr>
            </thead>
            <tbody>
              {orders.length === 0 && (
                <tr>
                  <td colSpan={11} className="text-center text-gray-400 p-4">
                    Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                  </td>
                </tr>
              )}
              {orders.map((o, i) => {
                const dep = departmentButtons[o.step || 0] || {};
                const item = getFirstItem(o);
                return (
                  <tr key={i} className="border-b hover:bg-gray-100">
                    <td className="p-2">SO{1000 + o.id}</td>
                    <td className="p-2">{o.customer_name}</td>
                    <td className="p-2">{item.product_name || ""}</td>
                    <td className="p-2">{item.quantity || ""}</td>
                    <td className="p-2">{item.unit || ""}</td>
                    <td className="p-2">{o.order_date}</td>
                    <td className="p-2">{o.delivery_date}</td>
                    <td className="p-2">{o.status}</td>
                    <td className="p-2 flex items-center gap-2">
                      <span
                        className={`px-2 py-1 rounded-full text-lg ${dep.color}`}
                      >
                        {dep.icon}
                      </span>
                      {dep.label}
                    </td>
                    <td className="p-2">
                      <button
                        className="underline text-blue-500"
                        onClick={() => setSelected(o)}
                      >
                        Xem
                      </button>
                    </td>
                    <td className="p-2">
                      <button
                        className="text-red-500 underline"
                        onClick={() => handleDeleteOrder(o.id)}
                      >
                        X√≥a
                      </button>
                    </td>
                  </tr>
                );
              })}
            </tbody>
          </table>
        </div>
      </div>
      {/* Order Detail Popup */}
      {selected && (
        <OrderDetail
          order={selected}
          onClose={() => setSelected(null)}
          onAdvance={advanceStep}
          role="admin"
          stepsFlow={stepsFlow}
          departmentButtons={departmentButtons}
        />
      )}
      {/* Modal t·∫°o ƒë∆°n m·ªõi */}
      {showOrderModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded-2xl p-6 min-w-[500px] max-w-full shadow-2xl">
            <div className="flex justify-between items-center mb-4">
              <div className="text-xl font-bold">T·∫°o ƒë∆°n h√†ng m·ªõi</div>
              <button
                className="text-xl"
                onClick={() => setShowOrderModal(false)}
              >
                ‚úï
              </button>
            </div>
            <OrderForm
              onAdd={(data) => {
                addOrder(data);
                setShowOrderModal(false);
              }}
            />
          </div>
        </div>
      )}
    </div>
  );
}

// Card hi·ªÉn th·ªã th·ªëng k√™
function StatCard({ title, value, icon }) {
  return (
    <div className="bg-white rounded-2xl shadow-md p-4 flex items-center gap-4">
      <div className="text-3xl">{icon}</div>
      <div>
        <div className="text-gray-500 text-sm">{title}</div>
        <div className="text-2xl font-bold">{value}</div>
      </div>
    </div>
  );
}
